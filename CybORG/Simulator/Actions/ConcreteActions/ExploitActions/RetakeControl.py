from ipaddress import IPv4Address

from CybORG.Shared import Observation
from CybORG.Simulator.Actions.ConcreteActions.ExploitActions.ExploitAction import ExploitAction
from CybORG.Simulator.Actions.ConcreteActions.RemoveOtherSessions import RemoveOtherSessions_AlwaysSuccessful
from CybORG.Simulator.Host import Host
from CybORG.Simulator.Process import Process
from CybORG.Simulator.State import State


class RetakeControl(ExploitAction):

    def __init__(self, session: int, agent: str, ip_address: IPv4Address):
        super().__init__(session, agent, ip_address)
        self.priority = 15
        self.detection_rate = 0.15
        self.success_rate = 0.75
        self.bandwidth_usage = 10

    def execute(self, state: State) -> Observation:
        obs = Observation(False)
        if self.agent not in state.sessions or self.session not in state.sessions[self.agent]:
            return obs

        hostname = state.sessions[self.agent][self.session].hostname
        if not self.dropped:
            for other_hostname in self.get_used_route(state):
                host = state.hosts[other_hostname]
                if other_hostname == self.blocked:
                    event = {
                        'local_address': self.ip_address,
                        'remote_port': 8888,
                        'remote_address': {h_name: ip_addr for ip_addr, h_name in state.ip_addresses.items()}[hostname]
                    }
                    host.events['NetworkConnections'].append(event)
                    return obs
                elif state.np_random.random() < self.detection_rate:
                    event = {
                        'local_address': self.ip_address,
                        'remote_port': 8888,
                        'remote_address': {h_name: ip_addr for ip_addr, h_name in state.ip_addresses.items()}[hostname]
                    }
                    host.events['NetworkConnections'].append(event)
        else:
            return obs
        if (1 - self.success_rate) > state.np_random.random():
            return Observation(False)
        hostname = state.ip_addresses[self.ip_address]
        agent = 'blue_agent_' + hostname.split('_')[-1]
        if len(state.sessions[agent]) == 0:
            session = state.add_session(hostname, 'root', agent, None, session_type='blue_drone_session', ident=0)

            sub_action = RemoveOtherSessions_AlwaysSuccessful(session.ident, session.agent, 'privileged')
            obs = sub_action.execute(state)
            return Observation(True)
        return Observation(False)

    def test_exploit_works(self, target_host: Host, vuln_process: Process, **kwargs) \
            -> bool:
        return True
