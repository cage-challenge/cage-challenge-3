from ipaddress import IPv4Address

from CybORG.Shared import Observation
from CybORG.Simulator.Actions.ConcreteActions.ExploitActions.ExploitAction import ExploitAction
from CybORG.Simulator.Host import Host
from CybORG.Simulator.Process import Process
from CybORG.Simulator.State import State


class ExploitDroneVulnerability(ExploitAction):
    def __init__(self, session: int, agent: str, ip_address: IPv4Address):
        super().__init__(session, agent, ip_address)
        self.priority = 4
        self.bandwidth_usage = 1
        self.detection_rate = 0.5
        self.success_rate = 0.5

    def execute(self, state: State) -> Observation:
        obs = self.sim_exploit(state, 8888, 'drone_vulnerability')
        # update IP addresses with hostnames
        update = []
        for key in obs.data.keys():
            if key != 'success':
                if IPv4Address(key) in state.ip_addresses:
                    update.append(key)
        for ip in update:
            data = obs.data.pop(ip)
            obs.data[state.ip_addresses[IPv4Address(ip)]] = data
        return obs

    def test_exploit_works(self, target_host: Host, vuln_proc: Process, **kwargs):
        return True

    def __str__(self):
        return super(ExploitDroneVulnerability, self).__str__() + f" {self.ip_address}"
