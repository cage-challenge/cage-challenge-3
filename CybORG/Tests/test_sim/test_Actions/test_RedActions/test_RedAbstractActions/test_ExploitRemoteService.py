import pytest 
import itertools 
from copy import deepcopy

from CybORG.Tests.test_sim.sim_fixtures import compromised_cyborg, SCENARIOS
from CybORG.Agents.Utils import ObservationWrapper
from CybORG.Simulator.Actions import ExploitRemoteService
from CybORG.Shared.Enums import SessionType, OperatingSystemType, ProcessType, ProcessState, TrinaryEnum
from CybORG.Tests.EphemeralPort import Win2008EphemeralPort, LinuxEphemeralPort

SCENARIO = 'Scenario2'
HOSTS = SCENARIOS[SCENARIO]['Hosts']
HOSTS = [h for h in HOSTS if h!='User0']
OS_MAP = SCENARIOS[SCENARIO]['OS_Map']

EXPLOIT_PARAMETERS = ['session', 'agent', 'ip_address']

@pytest.fixture(scope='module')
def source_host():
    return 'User0'

@pytest.fixture(scope='module')
def source_ip(cyborg):
    return cyborg.get_ip_map()['User0']

@pytest.fixture(params=HOSTS, scope='module')
def target_host(request):
    return request.param

@pytest.fixture(scope='module')
def target_ip(cyborg, target_host):
    return cyborg.get_ip_map()[target_host]

@pytest.fixture(scope='module')
def cyborg(target_host):
    return compromised_cyborg(SCENARIO, stop_host=target_host, stop_value=2)

@pytest.fixture(scope='module')
def action(target_ip):
    return ExploitRemoteService(ip_address=target_ip, agent='Red', session=0)

@pytest.fixture(scope='module')
def observation(cyborg, action):
    last_action = cyborg.get_last_action('Red')
    results = cyborg.step(action=action, agent='Red')

    return ObservationWrapper(results.observation)

@pytest.mark.skip
def test_ExploitRemoteService_success(observation, target_host):
    assert observation.success == (True if target_host != 'Defender' else False)

@pytest.mark.skip
def test_ExploitRemoteService_num_hosts(observation, target_host):
    assert len(observation.hosts) == 2 if target_host != 'Defender' else 1

@pytest.fixture(params=EXPLOIT_PARAMETERS, scope='module')
def junk_action(action, request):
    junk_action = deepcopy(action) 
    setattr(junk_action, request.param, 'Junk')

    return junk_action

@pytest.fixture(scope='module')
def junk_observation(cyborg, junk_action):
    results = cyborg.step(action=junk_action, agent='Red')

    return results.observation

def test_ExploitRemoteService_junk_input_observation(junk_observation, junk_action):
    assert junk_observation == {'success':TrinaryEnum.UNKNOWN}

@pytest.fixture(scope='module')
def last_action(cyborg, junk_observation):
    # Junk observation required to ensure cyborg actually executes junk action
    return cyborg.get_last_action('Red')

def test_ExploitRemoteService_junk_input_action(last_action):
    assert last_action.name == 'InvalidAction'

def test_ExploitRemoteService_junk_input_replaced_action(last_action, junk_action):
    assert getattr(last_action, 'action') == junk_action

def test_ExploitRemoteService_unscanned(cyborg, target_ip, action):
    cyborg.reset()
    action = ExploitRemoteService(ip_address=target_ip, agent='Red', session=0)
    results = cyborg.step(action=action, agent='Red')

    assert results.observation == {'success': TrinaryEnum.UNKNOWN}

