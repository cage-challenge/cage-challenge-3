import pytest 
import itertools 
from copy import deepcopy

from CybORG.Tests.test_sim.sim_fixtures import compromised_cyborg, SCENARIOS
from CybORG.Agents.Utils import ObservationWrapper
from CybORG.Simulator.Actions import SSHBruteForce
from CybORG.Shared.Enums import SessionType, OperatingSystemType, ProcessType, ProcessState, TrinaryEnum
from CybORG.Tests.EphemeralPort import Win2008EphemeralPort, LinuxEphemeralPort

SCENARIO = 'Scenario2'
HOSTS = SCENARIOS[SCENARIO]['Hosts']
VULNERABLE_HOSTS = ['User0', 'User1', 'User4', 'Enterprise0', 'Enterprise1', \
        'Enterprise2', 'Op_Server0', 'Op_Host0', 'Op_Host1', 'Op_Host2']
OS_MAP = SCENARIOS[SCENARIO]['OS_Map']

EXPLOIT_PARAMETERS = ['session', 'agent', 'ip_address']

@pytest.fixture(scope='module')
def source_host():
    return 'User0'

@pytest.fixture(scope='module')
def source_ip(cyborg):
    return cyborg.get_ip_map()['User0']

@pytest.fixture(params=HOSTS, scope='module')
def target_host(request):
    return request.param

@pytest.fixture(scope='module')
def target_ip(cyborg, target_host):
    return cyborg.get_ip_map()[target_host]

@pytest.fixture(scope='module')
def cyborg(target_host):
    return compromised_cyborg(SCENARIO, stop_host=target_host, stop_value=1)

@pytest.fixture(scope='module')
def action(target_ip, cyborg):
    return SSHBruteForce(ip_address=target_ip, agent='Red', session=0)

@pytest.fixture(scope='module')
def observation(cyborg, action):
    results = cyborg.step(action=action, agent='Red')

    return ObservationWrapper(results.observation)

def test_SSHBruteForce_success(observation, target_host):
    if target_host == 'User0':
        return
    assert observation.success == (True if target_host in VULNERABLE_HOSTS else False)

@pytest.fixture
def expected_num_hosts(target_host):
    if target_host in ['User0', 'Defender']:
        return 1

    return 2 if target_host in VULNERABLE_HOSTS else 0

def test_SSHBruteForce_num_hosts(observation, expected_num_hosts, target_host):
    if target_host == 'User0':
        return
    assert len(observation.hosts) == expected_num_hosts

def test_SSHBruteForce_source_interfaces(observation, source_ip, target_host):
    if target_host == 'User0':
        return
    interface = [{'IP Address': source_ip}] if target_host is not 'Defender' else []
    expected_interface = interface if target_host in VULNERABLE_HOSTS else []

    assert observation.get_interfaces(source_ip) == expected_interface

def test_SSHBruteForce_source_processes(observation, source_ip, target_host, target_ip):
    if target_host == 'User0':
        return
    os = OS_MAP[target_host]
    ephemeral_port = Win2008EphemeralPort() if os == OperatingSystemType.WINDOWS \
            else LinuxEphemeralPort()

    ssh_connections = [{
        'Status': ProcessState.OPEN,
        'local_port': 22,
        'local_address': source_ip,
        }]

    ssh_process = {
        'Connections': ssh_connections,
        'Process Type': ProcessType.SSH
        }

    source_connection = [{
        'local_address': source_ip,
        'local_port': ephemeral_port,
        'remote_address': target_ip,
        'remote_port': 22
        }] 

    target_connection = [{
        'local_address': target_ip,
        'local_port': 22,
        'remote_address': source_ip,
        'remote_port': ephemeral_port
        }] 

    source_process = {
        'Connections': source_connection,
        }

    target_process = {
        'Connections': target_connection,
        'Process Type': ProcessType.SSH
        }

    if target_host == 'User0':
        processes = [ssh_process, target_process, source_process]
    else:
        processes = [source_process]

    expected_processes = processes if target_host in VULNERABLE_HOSTS else []

    assert observation.get_processes(source_ip) == expected_processes

def test_SSHBruteForce_source_sessions(observation, source_ip, target_host):
    if target_host == 'User0':
        return
    agent_session = 1
    if target_host == 'User0':
        sessions = [{
            'Username': 'vagrant',
            'ID': agent_session,
            'Type': SessionType.SSH,
            'Agent': 'Red'
            }]
    else:
        sessions = []

    expected_sessions = sessions if target_host in VULNERABLE_HOSTS else []

    assert observation.get_sessions(source_ip) == expected_sessions

def test_SSHBruteForce_source_os_info(observation, source_ip, target_host):
    if target_host == 'User0':
        return
    os = OS_MAP[target_host]
    if target_host == 'User0':
        os_info = {
                'Hostname': target_host,
                'OSType': os
                }
    else:
        os_info = {}

    expected_os_info = os_info if target_host in VULNERABLE_HOSTS else {}

    assert observation.get_os_info(source_ip) == expected_os_info

def test_SSHBruteForce_target_interfaces(observation, target_ip, target_host):
    if target_host == 'User0':
        return
    interface = [{'IP Address': target_ip}]
    expected_interface = interface if target_host in VULNERABLE_HOSTS else []
    if target_host == 'Defender':
        expected_interface = interface

    assert observation.get_interfaces(target_ip) == expected_interface

def test_SSHBruteForce_target_processes(observation, target_ip, target_host, source_ip):
    if target_host == 'User0':
        return
    os = OS_MAP[target_host]
    ephemeral_port = Win2008EphemeralPort() if os == OperatingSystemType.WINDOWS \
            else LinuxEphemeralPort()

    shell_connection = [{
        'local_port': 22,
        'local_address': target_ip,
        'Status': ProcessState.OPEN
        }]

    reverse_shell = {
        'Connections': shell_connection,
        'Process Type': ProcessType.SSH
        }

    outbound_connection = [{
            'local_port': 22,
            'local_address': target_ip,
            'remote_port': ephemeral_port,
            'remote_address': source_ip,
            }]

    outbound_process = {
            'Connections': outbound_connection,
            'Process Type': ProcessType.SSH,
            }

    inbound_connection = [{
            'local_port': ephemeral_port,
            'local_address': target_ip,
            'remote_port': 22,
            'remote_address': target_ip,
            }]

    inbound_process = {'Connections': inbound_connection}

    if target_host == 'User0':
        processes = [reverse_shell, inbound_process, outbound_process]
    else:
        processes = [reverse_shell, outbound_process]

    expected_processes = processes if target_host in VULNERABLE_HOSTS else []

    if target_host == 'Defender':
        expected_processes = [reverse_shell]

    assert observation.get_processes(target_ip) == expected_processes


def test_SSHBruteForce_target_sessions(observation, target_ip, target_host, cyborg):
    if target_host == 'User0':
        return
    agent_session = max(HOSTS.index(target_host), 1)
    agent_session -= 1 if HOSTS.index(target_host) > 8 else 0
    pi_hosts = ['User4', 'Enterprise0', 'Op_Server0', 'Op_Host0', 'Op_Host1', 'Op_Host2']
    username = 'vagrant' if target_host not in pi_hosts else 'pi'
    sessions = [{
        'Username': username,
        'ID': agent_session,
        'Type': SessionType.SSH,
        'Agent': 'Red'
        }]
    expected_sessions = sessions if target_host in VULNERABLE_HOSTS else []

    try:
        assert observation.get_sessions(target_ip) == expected_sessions
    except:
        from pprint import pprint
        tacca = observation.get_sessions(target_ip)
        macca = expected_sessions
        breakpoint()

def test_SSHBruteForce_target_os_info(observation, target_ip, target_host):
    if target_host == 'User0':
        return
    os = OS_MAP[target_host]
    os_info = {
            'Hostname': target_host,
            'OSType': os
            }

    expected_os_info = os_info if target_host in VULNERABLE_HOSTS else {}

    assert observation.get_os_info(target_ip) == expected_os_info

@pytest.fixture(params=EXPLOIT_PARAMETERS, scope='module')
def junk_action(action, request):
    junk_action = deepcopy(action) 
    setattr(junk_action, request.param, 'Junk')

    return junk_action

@pytest.fixture(scope='module')
def junk_observation(cyborg, junk_action):
    results = cyborg.step(action=junk_action, agent='Red')

    return results.observation

def test_SSHBruteForce_junk_input_observation(junk_observation, junk_action):
    assert junk_observation == {'success':TrinaryEnum.UNKNOWN}

@pytest.fixture(scope='module')
def last_action(cyborg, junk_observation):
    # Junk observation required to ensure cyborg actually executes junk action
    return cyborg.get_last_action('Red')

def test_SSHBruteForce_junk_input_action(last_action):
    assert last_action.name == 'InvalidAction'

def test_SSHBruteForce_junk_input_replaced_action(last_action, junk_action):
    assert getattr(last_action, 'action') == junk_action

def test_SSHBruteForce_unscanned(cyborg, target_host, action):
    if target_host == 'User0':
        return

    cyborg.reset()
    target_ip = cyborg.get_ip_map()[target_host]
    action = SSHBruteForce(ip_address=target_ip, agent='Red', session=0)
    results = cyborg.step(action=action, agent='Red')

    assert results.observation == {'success': TrinaryEnum.UNKNOWN}
